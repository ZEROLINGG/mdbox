<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
    <channel>
      <title>Quartz 4</title>
      <link>https://quartz.jzhao.xyz</link>
      <description>Last 10 notes on Quartz 4</description>
      <generator>Quartz -- quartz.jzhao.xyz</generator>
      <item>
    <title>拷贝构造函数</title>
    <link>https://quartz.jzhao.xyz/c++/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80/%E6%8B%B7%E8%B4%9D%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0</link>
    <guid>https://quartz.jzhao.xyz/c++/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80/%E6%8B%B7%E8%B4%9D%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0</guid>
    <description><![CDATA[ 一、拷贝构造函数基础 1.1 拷贝构造函数的定义和声明 class CopyConstructorBasics { private: int* data; size_t size; std::string name; public: // 标准拷贝构造函数声明 CopyConstructorBasics(const CopyConstructorBasics&amp; other); // 其他可能的声明形式（不常用） // CopyConstructorBasics(CopyConstructorBasics&amp; other); // 非const引用 // CopyConstruct... ]]></description>
    <pubDate>Tue, 12 Aug 2025 03:01:03 GMT</pubDate>
  </item><item>
    <title>构造函数与析构函数</title>
    <link>https://quartz.jzhao.xyz/c++/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E4%B8%8E%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0</link>
    <guid>https://quartz.jzhao.xyz/c++/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E4%B8%8E%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0</guid>
    <description><![CDATA[ 一、构造函数基础 1.1 构造函数概述与类型 class ConstructorBasics { private: int* data; size_t size; std::string name; const int id; // const成员 int&amp; ref; // 引用成员 static int counter; // 静态成员 public: // 1. ]]></description>
    <pubDate>Tue, 12 Aug 2025 02:49:26 GMT</pubDate>
  </item><item>
    <title>访问控制</title>
    <link>https://quartz.jzhao.xyz/c++/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80/%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6</link>
    <guid>https://quartz.jzhao.xyz/c++/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80/%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6</guid>
    <description><![CDATA[ C++ 访问控制详解（public、private、protected） 一、访问控制基础概念 1.1 三种访问级别概述 class AccessLevels { private: // 私有成员：只能被本类的成员函数和友元访问 int privateData; void privateMethod() { std::cout &lt;&lt; &quot;Private method\n&quot;; } protected: // 保护成员：能被本类、派生类的成员函数和友元访问 int protectedData; void protectedMethod() { std::cout &l... ]]></description>
    <pubDate>Tue, 12 Aug 2025 02:44:06 GMT</pubDate>
  </item><item>
    <title>成员变量与成员函数</title>
    <link>https://quartz.jzhao.xyz/c++/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80/%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E4%B8%8E%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0</link>
    <guid>https://quartz.jzhao.xyz/c++/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80/%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E4%B8%8E%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0</guid>
    <description><![CDATA[ 一、成员变量详解 1.1 成员变量的类型与声明 class MemberVariables { private: // 1. 基本类型成员变量 int intMember; double doubleMember; char charMember; bool boolMember; // 2. ]]></description>
    <pubDate>Tue, 12 Aug 2025 02:36:21 GMT</pubDate>
  </item><item>
    <title>类的定义与对象创建</title>
    <link>https://quartz.jzhao.xyz/c++/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80/%E7%B1%BB%E7%9A%84%E5%AE%9A%E4%B9%89%E4%B8%8E%E5%AF%B9%E8%B1%A1%E5%88%9B%E5%BB%BA</link>
    <guid>https://quartz.jzhao.xyz/c++/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80/%E7%B1%BB%E7%9A%84%E5%AE%9A%E4%B9%89%E4%B8%8E%E5%AF%B9%E8%B1%A1%E5%88%9B%E5%BB%BA</guid>
    <description><![CDATA[ 一、类的基本定义 1.1 类的基本结构 // 类的完整定义示例 class Student { // 访问控制 private: // 私有数据成员 std::string name; int age; double gpa; static int totalStudents; // 静态成员变量 protected: // 受保护成员 int studentId; public: // 公有成员函数 // 构造函数 Student(); // 默认构造函数 Student(const std::string&amp; n, int a); // 参数化构造函数 Student(const S... ]]></description>
    <pubDate>Tue, 12 Aug 2025 02:35:51 GMT</pubDate>
  </item><item>
    <title>内存管理最佳实践</title>
    <link>https://quartz.jzhao.xyz/c++/%E6%8C%87%E9%92%88%E4%B8%8E%E5%BC%95%E7%94%A8/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5</link>
    <guid>https://quartz.jzhao.xyz/c++/%E6%8C%87%E9%92%88%E4%B8%8E%E5%BC%95%E7%94%A8/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5</guid>
    <description><![CDATA[ C++ 内存管理最佳实践详解 一、内存管理基础概念 1.1 内存区域划分 // C++程序内存布局 class MemoryLayout { // 栈（Stack）：存储局部变量、函数参数 void stackExample() { int localVar = 10; // 栈上分配 char arr[100]; // 栈上分配 } // 函数结束，自动释放 // 堆（Heap）：动态分配的内存 void heapExample() { int* p = new int(10); // 堆上分配 delete p; // 手动释放 } // 全局/静态存储区 static int stati... ]]></description>
    <pubDate>Tue, 12 Aug 2025 02:28:14 GMT</pubDate>
  </item><item>
    <title>index</title>
    <link>https://quartz.jzhao.xyz/c++/</link>
    <guid>https://quartz.jzhao.xyz/c++/</guid>
    <description><![CDATA[ C++ 系统学习目录 一、基础入门 1. C++概述与环境搭建 C++的历史与特点 编译器安装（GCC、Clang、MSVC） IDE选择与配置（Visual Studio、Code::Blocks、CLion、VS Code） 第一个C++程序 编译与链接过程 调试技巧与工具 2. ]]></description>
    <pubDate>Sat, 09 Aug 2025 13:01:19 GMT</pubDate>
  </item><item>
    <title>递归函数</title>
    <link>https://quartz.jzhao.xyz/c++/%E5%87%BD%E6%95%B0/%E9%80%92%E5%BD%92%E5%87%BD%E6%95%B0</link>
    <guid>https://quartz.jzhao.xyz/c++/%E5%87%BD%E6%95%B0/%E9%80%92%E5%BD%92%E5%87%BD%E6%95%B0</guid>
    <description><![CDATA[ 递归函数是指在函数体内调用自身的函数。递归是一种强大的编程技术，它将复杂问题分解为相似但规模更小的子问题来解决。 递归的基本概念 递归的组成要素 #include &lt;iostream&gt; // 基本递归示例：计算阶乘 int factorial(int n) { // 1. ]]></description>
    <pubDate>Sat, 09 Aug 2025 13:01:19 GMT</pubDate>
  </item><item>
    <title>作用域与生命周期</title>
    <link>https://quartz.jzhao.xyz/c++/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%B8%8E%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F</link>
    <guid>https://quartz.jzhao.xyz/c++/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%B8%8E%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F</guid>
    <description><![CDATA[ 作用域（Scope）和生命周期（Lifetime）是 C++ 中的两个重要概念。作用域决定了变量在程序中的可见性，而生命周期决定了变量在内存中存在的时间。 作用域的基本概念 全局作用域 #include &lt;iostream&gt; // 全局变量 - 全局作用域 int globalVar = 100; const int globalConst = 200; static int staticGlobal = 300; // 文件作用域 // 全局函数 void globalFunction() { std::cout &lt;&lt; &quot;全局函数被调用&quot; &lt;... ]]></description>
    <pubDate>Sat, 09 Aug 2025 13:01:19 GMT</pubDate>
  </item><item>
    <title>异常处理基础</title>
    <link>https://quartz.jzhao.xyz/c++/%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E5%9F%BA%E7%A1%80</link>
    <guid>https://quartz.jzhao.xyz/c++/%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E5%9F%BA%E7%A1%80</guid>
    <description><![CDATA[ 异常处理是 C++ 中处理运行时错误的机制，它允许程序在遇到错误时优雅地处理，而不是直接崩溃。异常处理使用 try、catch 和 throw 关键字来实现。 异常处理的基本概念 try-catch 基础 #include &lt;iostream&gt; #include &lt;stdexcept&gt; #include &lt;string&gt; // 可能抛出异常的函数 int divide(int a, int b) { if (b == 0) { throw std::runtime_error(&quot;除数不能为零&quot;); } return a / b; } do... ]]></description>
    <pubDate>Sat, 09 Aug 2025 13:01:19 GMT</pubDate>
  </item>
    </channel>
  </rss>