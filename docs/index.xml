<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
    <channel>
      <title>Quartz 4</title>
      <link>https://quartz.jzhao.xyz</link>
      <description>Last 10 notes on Quartz 4</description>
      <generator>Quartz -- quartz.jzhao.xyz</generator>
      <item>
    <title>智能指针基础</title>
    <link>https://quartz.jzhao.xyz/c++/%E6%8C%87%E9%92%88%E4%B8%8E%E5%BC%95%E7%94%A8/%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88%E5%9F%BA%E7%A1%80</link>
    <guid>https://quartz.jzhao.xyz/c++/%E6%8C%87%E9%92%88%E4%B8%8E%E5%BC%95%E7%94%A8/%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88%E5%9F%BA%E7%A1%80</guid>
    <description><![CDATA[ 智能指针是 C++11 引入的重要特性，它们提供了自动内存管理功能，帮助避免内存泄漏、悬空指针等常见问题。智能指针是现代 C++ 编程的核心组成部分。 智能指针概述 为什么需要智能指针 #include &lt;iostream&gt; // 传统指针的问题示例 void traditionalPointerProblems() { std::cout &lt;&lt; &quot;=== 传统指针的问题 ===&quot; &lt;&lt; std::endl; // 1. ]]></description>
    <pubDate>Sat, 09 Aug 2025 09:40:57 GMT</pubDate>
  </item><item>
    <title>指针与引用的区别</title>
    <link>https://quartz.jzhao.xyz/c++/%E6%8C%87%E9%92%88%E4%B8%8E%E5%BC%95%E7%94%A8/%E6%8C%87%E9%92%88%E4%B8%8E%E5%BC%95%E7%94%A8%E7%9A%84%E5%8C%BA%E5%88%AB</link>
    <guid>https://quartz.jzhao.xyz/c++/%E6%8C%87%E9%92%88%E4%B8%8E%E5%BC%95%E7%94%A8/%E6%8C%87%E9%92%88%E4%B8%8E%E5%BC%95%E7%94%A8%E7%9A%84%E5%8C%BA%E5%88%AB</guid>
    <description><![CDATA[ 指针与引用是 C++ 中两个重要的概念，虽然它们都可以用来间接访问对象，但在语法、语义和使用方式上有着显著的区别。 基本概念对比 定义和初始化 #include &lt;iostream&gt; int main() { int x = 42; int y = 100; // 指针的声明和初始化 int* ptr; // 可以声明但不初始化 ptr = &amp;x; // 后续可以赋值 int* ptr2 = &amp;x; // 声明时初始化 int* ptr3 = nullptr; // 可以初始化为空 // 引用的声明和初始化 int&amp; ref = x; // 必须在声明时初始... ]]></description>
    <pubDate>Sat, 09 Aug 2025 09:38:16 GMT</pubDate>
  </item><item>
    <title>引用的概念与使用</title>
    <link>https://quartz.jzhao.xyz/c++/%E6%8C%87%E9%92%88%E4%B8%8E%E5%BC%95%E7%94%A8/%E5%BC%95%E7%94%A8%E7%9A%84%E6%A6%82%E5%BF%B5%E4%B8%8E%E4%BD%BF%E7%94%A8</link>
    <guid>https://quartz.jzhao.xyz/c++/%E6%8C%87%E9%92%88%E4%B8%8E%E5%BC%95%E7%94%A8/%E5%BC%95%E7%94%A8%E7%9A%84%E6%A6%82%E5%BF%B5%E4%B8%8E%E4%BD%BF%E7%94%A8</guid>
    <description><![CDATA[ 引用（Reference）是 C++ 中的一个重要特性，它为已存在的变量提供了一个别名。引用在很多方面比指针更安全、更易用，是现代 C++ 编程的重要组成部分。 引用的基本概念 什么是引用 引用可以看作是一个已存在变量的别名。对引用的任何操作，实际上都是对它所引用的原始变量的操作。 #include &lt;iostream&gt; int main() { // 普通变量 int x = 42; // 引用声明：必须在声明时初始化 int&amp; ref = x; // ref 是 x 的引用（别名） std::cout &lt;&lt; &quot;引用的基本概念:&quot; &lt;... ]]></description>
    <pubDate>Sat, 09 Aug 2025 09:34:24 GMT</pubDate>
  </item><item>
    <title>动态内存分配</title>
    <link>https://quartz.jzhao.xyz/c++/%E6%8C%87%E9%92%88%E4%B8%8E%E5%BC%95%E7%94%A8/%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D</link>
    <guid>https://quartz.jzhao.xyz/c++/%E6%8C%87%E9%92%88%E4%B8%8E%E5%BC%95%E7%94%A8/%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D</guid>
    <description><![CDATA[ 动态内存分配是 C++ 中的重要概念，它允许程序在运行时根据需要分配和释放内存。这与静态内存分配（编译时确定大小）形成对比。 内存分区概述 程序内存布局 #include &lt;iostream&gt; // 全局变量 - 存储在数据段 int global_var = 100; static int static_global = 200; // 常量 - 存储在只读数据段 const int const_global = 300; void demonstrateMemoryLayout() { // 局部变量 - 存储在栈上 int local_var = 400; static in... ]]></description>
    <pubDate>Sat, 09 Aug 2025 09:24:09 GMT</pubDate>
  </item><item>
    <title>指针与数组的关系</title>
    <link>https://quartz.jzhao.xyz/c++/%E6%8C%87%E9%92%88%E4%B8%8E%E5%BC%95%E7%94%A8/%E6%8C%87%E9%92%88%E4%B8%8E%E6%95%B0%E7%BB%84%E7%9A%84%E5%85%B3%E7%B3%BB</link>
    <guid>https://quartz.jzhao.xyz/c++/%E6%8C%87%E9%92%88%E4%B8%8E%E5%BC%95%E7%94%A8/%E6%8C%87%E9%92%88%E4%B8%8E%E6%95%B0%E7%BB%84%E7%9A%84%E5%85%B3%E7%B3%BB</guid>
    <description><![CDATA[ 指针与数组在 C++ 中有着密切的关系，理解它们之间的联系和区别对于掌握 C++ 至关重要。 数组名与指针的关系 数组名的本质 #include &lt;iostream&gt; int main() { int arr[5] = {10, 20, 30, 40, 50}; // 数组名在大多数情况下会退化为指向第一个元素的指针 std::cout &lt;&lt; &quot;数组名和指针的关系:&quot; &lt;&lt; std::endl; std::cout &lt;&lt; &quot;arr = &quot; &lt;&lt; arr &lt;&lt; std::endl; /... ]]></description>
    <pubDate>Sat, 09 Aug 2025 09:21:47 GMT</pubDate>
  </item><item>
    <title>指针的概念与操作</title>
    <link>https://quartz.jzhao.xyz/c++/%E6%8C%87%E9%92%88%E4%B8%8E%E5%BC%95%E7%94%A8/%E6%8C%87%E9%92%88%E7%9A%84%E6%A6%82%E5%BF%B5%E4%B8%8E%E6%93%8D%E4%BD%9C</link>
    <guid>https://quartz.jzhao.xyz/c++/%E6%8C%87%E9%92%88%E4%B8%8E%E5%BC%95%E7%94%A8/%E6%8C%87%E9%92%88%E7%9A%84%E6%A6%82%E5%BF%B5%E4%B8%8E%E6%93%8D%E4%BD%9C</guid>
    <description><![CDATA[ 指针是 C++ 中最重要也是最具挑战性的概念之一。指针是一个变量，它存储另一个变量的内存地址。理解指针对于掌握 C++ 至关重要。 指针的基本概念 什么是指针 #include &lt;iostream&gt; int main() { // 普通变量 int x = 42; // 指针变量：存储其他变量的地址 int* ptr = &amp;x; // ptr 指向 x 的地址 std::cout &lt;&lt; &quot;变量 x 的值: &quot; &lt;&lt; x &lt;&lt; std::endl; std::cout &lt;&lt; &quot;变量 x 的地址: &... ]]></description>
    <pubDate>Sat, 09 Aug 2025 09:19:08 GMT</pubDate>
  </item><item>
    <title>字符串操作函数</title>
    <link>https://quartz.jzhao.xyz/c++/%E6%95%B0%E7%BB%84%E4%B8%8E%E5%AD%97%E7%AC%A6%E4%B8%B2/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C%E5%87%BD%E6%95%B0</link>
    <guid>https://quartz.jzhao.xyz/c++/%E6%95%B0%E7%BB%84%E4%B8%8E%E5%AD%97%E7%AC%A6%E4%B8%B2/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C%E5%87%BD%E6%95%B0</guid>
    <description><![CDATA[ 好的，我们来对 C++ 中的字符串操作函数进行一次全面而详细的讲解。 我们将分为三个主要部分： C 风格字符串的操作函数 (&lt;cstring&gt;头文件)：这是从 C 语言继承来的，理解它们有助于了解 C++ 的历史和与 C 库的交互，但在现代 C++ 中应谨慎使用。 std::string 类的成员函数 (&lt;string&gt;头文件)：这是现代 C++ 中处理字符串的首选方式，安全、方便、功能强大。 作用于 std::string 的 STL 算法 (&lt;algorithm&gt;头文件)：展示了 std::string作为标准容器的强大之处。 Part 1: C 风格字... ]]></description>
    <pubDate>Sat, 09 Aug 2025 09:11:15 GMT</pubDate>
  </item><item>
    <title>string类的使用</title>
    <link>https://quartz.jzhao.xyz/c++/%E6%95%B0%E7%BB%84%E4%B8%8E%E5%AD%97%E7%AC%A6%E4%B8%B2/string%E7%B1%BB%E7%9A%84%E4%BD%BF%E7%94%A8</link>
    <guid>https://quartz.jzhao.xyz/c++/%E6%95%B0%E7%BB%84%E4%B8%8E%E5%AD%97%E7%AC%A6%E4%B8%B2/string%E7%B1%BB%E7%9A%84%E4%BD%BF%E7%94%A8</guid>
    <description><![CDATA[ C++ 中的 std::string 类是标准库提供的字符串类，相比 C 风格字符串更安全、更易用、功能更强大。它是现代 C++ 中处理字符串的首选方式。 string 类的基础 包含头文件和基本声明 #include &lt;iostream&gt; #include &lt;string&gt; #include &lt;vector&gt; int main() { // 1. ]]></description>
    <pubDate>Sat, 09 Aug 2025 09:02:04 GMT</pubDate>
  </item><item>
    <title>字符数组与C风格字符串</title>
    <link>https://quartz.jzhao.xyz/c++/%E6%95%B0%E7%BB%84%E4%B8%8E%E5%AD%97%E7%AC%A6%E4%B8%B2/%E5%AD%97%E7%AC%A6%E6%95%B0%E7%BB%84%E4%B8%8EC%E9%A3%8E%E6%A0%BC%E5%AD%97%E7%AC%A6%E4%B8%B2</link>
    <guid>https://quartz.jzhao.xyz/c++/%E6%95%B0%E7%BB%84%E4%B8%8E%E5%AD%97%E7%AC%A6%E4%B8%B2/%E5%AD%97%E7%AC%A6%E6%95%B0%E7%BB%84%E4%B8%8EC%E9%A3%8E%E6%A0%BC%E5%AD%97%E7%AC%A6%E4%B8%B2</guid>
    <description><![CDATA[ C++ 中的字符数组和 C 风格字符串是处理文本数据的基础方式。虽然现代 C++ 推荐使用 std::string，但理解字符数组和 C 风格字符串仍然非常重要。 字符数组基础 字符数组的声明和初始化 #include &lt;iostream&gt; #include &lt;cstring&gt; int main() { // 1. ]]></description>
    <pubDate>Sat, 09 Aug 2025 08:59:09 GMT</pubDate>
  </item><item>
    <title>一维与多维数组</title>
    <link>https://quartz.jzhao.xyz/c++/%E6%95%B0%E7%BB%84%E4%B8%8E%E5%AD%97%E7%AC%A6%E4%B8%B2/%E4%B8%80%E7%BB%B4%E4%B8%8E%E5%A4%9A%E7%BB%B4%E6%95%B0%E7%BB%84</link>
    <guid>https://quartz.jzhao.xyz/c++/%E6%95%B0%E7%BB%84%E4%B8%8E%E5%AD%97%E7%AC%A6%E4%B8%B2/%E4%B8%80%E7%BB%B4%E4%B8%8E%E5%A4%9A%E7%BB%B4%E6%95%B0%E7%BB%84</guid>
    <description><![CDATA[ C++ 中的数组是存储相同类型元素的连续内存块。数组分为一维数组和多维数组，是程序设计中最基础的数据结构之一。 一维数组 一维数组的声明和初始化 #include &lt;iostream&gt; int main() { // 1. ]]></description>
    <pubDate>Sat, 09 Aug 2025 08:53:43 GMT</pubDate>
  </item>
    </channel>
  </rss>