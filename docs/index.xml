<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
    <channel>
      <title>Quartz 4</title>
      <link>https://quartz.jzhao.xyz</link>
      <description>Last 10 notes on Quartz 4</description>
      <generator>Quartz -- quartz.jzhao.xyz</generator>
      <item>
    <title>Playwright</title>
    <link>https://quartz.jzhao.xyz/C-Sharp/Playwright</link>
    <guid>https://quartz.jzhao.xyz/C-Sharp/Playwright</guid>
    <description><![CDATA[ 目录结构 核心基础 - 架构、生命周期、基本概念 元素定位与交互 - 选择器、Locator API、等待策略 媒体捕获 - 截图、视频录制、PDF生成 高级交互 - 表单、键鼠操作、拖拽 网络层操作 - 请求拦截、Mock、API测试 多页面管理 - 窗口、Frame、Shadow DOM 测试配置 - 浏览器配置、设备模拟、认证 调试与优化 - 性能监控、调试技巧、最佳实践 测试框架集成 - NUnit、 第一部分：核心基础 1.1 完整架构与生命周期 /// &lt;summary&gt; /// Playwright 完整架构说明 /// &lt;/summary&gt; public... ]]></description>
    <pubDate>Fri, 22 Aug 2025 12:53:50 GMT</pubDate>
  </item><item>
    <title>index</title>
    <link>https://quartz.jzhao.xyz/c++/</link>
    <guid>https://quartz.jzhao.xyz/c++/</guid>
    <description><![CDATA[ C++ 系统学习目录 一、基础入门 1. C++概述与环境搭建 C++的历史与特点 编译器安装（GCC、Clang、MSVC） IDE选择与配置（Visual Studio、Code::Blocks、CLion、VS Code） 第一个C++程序 编译与链接过程 调试技巧与工具 2. ]]></description>
    <pubDate>Fri, 22 Aug 2025 12:53:50 GMT</pubDate>
  </item><item>
    <title>函数模板</title>
    <link>https://quartz.jzhao.xyz/c++/%E6%A8%A1%E6%9D%BF%E7%BC%96%E7%A8%8B/%E5%87%BD%E6%95%B0%E6%A8%A1%E6%9D%BF</link>
    <guid>https://quartz.jzhao.xyz/c++/%E6%A8%A1%E6%9D%BF%E7%BC%96%E7%A8%8B/%E5%87%BD%E6%95%B0%E6%A8%A1%E6%9D%BF</guid>
    <description><![CDATA[ 想象一下，你需要编写一个函数来交换两个变量的值。 对于 int 类型，你会这样写： void swapInt(int&amp; a, int&amp; b) { int temp = a; a = b; b = temp; } 对于 double 类型，你又得写一个： void swapDouble(double&amp; a, double&amp; b) { double temp = a; a = b; b = temp; } 对于 std::string 类型，还得再写一个… 你会发现，这些函数的逻辑完全一样，唯一的区别就是处理的数据类型不同。这导致了大量的代码冗余，并且难以维护。如果... ]]></description>
    <pubDate>Fri, 22 Aug 2025 12:53:50 GMT</pubDate>
  </item><item>
    <title>类模板</title>
    <link>https://quartz.jzhao.xyz/c++/%E6%A8%A1%E6%9D%BF%E7%BC%96%E7%A8%8B/%E7%B1%BB%E6%A8%A1%E6%9D%BF</link>
    <guid>https://quartz.jzhao.xyz/c++/%E6%A8%A1%E6%9D%BF%E7%BC%96%E7%A8%8B/%E7%B1%BB%E6%A8%A1%E6%9D%BF</guid>
    <description><![CDATA[ 一、类模板的核心概念 1. ]]></description>
    <pubDate>Fri, 22 Aug 2025 12:53:50 GMT</pubDate>
  </item><item>
    <title>赋值运算符重载</title>
    <link>https://quartz.jzhao.xyz/c++/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80/%E8%B5%8B%E5%80%BC%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD</link>
    <guid>https://quartz.jzhao.xyz/c++/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80/%E8%B5%8B%E5%80%BC%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD</guid>
    <description><![CDATA[ 一、赋值运算符基础 1.1 赋值运算符的基本形式 class AssignmentBasics { private: int* data; size_t size; std::string name; public: // 标准的拷贝赋值运算符 AssignmentBasics&amp; operator=(const AssignmentBasics&amp; other) { std::cout &lt;&lt; &quot;Copy assignment operator called\n&quot;; // 1. ]]></description>
    <pubDate>Fri, 22 Aug 2025 12:53:50 GMT</pubDate>
  </item><item>
    <title>多态</title>
    <link>https://quartz.jzhao.xyz/c++/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/%E5%A4%9A%E6%80%81</link>
    <guid>https://quartz.jzhao.xyz/c++/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/%E5%A4%9A%E6%80%81</guid>
    <description><![CDATA[ 1. 多态的基本概念 多态（Polymorphism）是面向对象编程的核心特性之一，允许同一个接口表现出不同的行为。C++支持两种多态： 编译时多态（静态多态）：函数重载、运算符重载、模板 运行时多态（动态多态）：虚函数机制 2. ]]></description>
    <pubDate>Fri, 22 Aug 2025 12:53:50 GMT</pubDate>
  </item><item>
    <title>封装</title>
    <link>https://quartz.jzhao.xyz/c++/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/%E5%B0%81%E8%A3%85</link>
    <guid>https://quartz.jzhao.xyz/c++/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/%E5%B0%81%E8%A3%85</guid>
    <description><![CDATA[ C++ 封装详解 一、封装的基本概念 1.1 什么是封装 // 封装的核心思想：隐藏实现细节，提供公共接口 class EncapsulationBasics { private: // 数据隐藏：内部实现细节 int internalData; double sensitiveInfo; std::vector&lt;int&gt; privateBuffer; // 私有辅助方法 void validateData(int value) { if (value &lt; 0 || value &gt; 100) { throw std::invalid_argument(&quot;Val... ]]></description>
    <pubDate>Fri, 22 Aug 2025 12:53:50 GMT</pubDate>
  </item><item>
    <title>抽象类与纯虚函数</title>
    <link>https://quartz.jzhao.xyz/c++/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/%E6%8A%BD%E8%B1%A1%E7%B1%BB%E4%B8%8E%E7%BA%AF%E8%99%9A%E5%87%BD%E6%95%B0</link>
    <guid>https://quartz.jzhao.xyz/c++/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/%E6%8A%BD%E8%B1%A1%E7%B1%BB%E4%B8%8E%E7%BA%AF%E8%99%9A%E5%87%BD%E6%95%B0</guid>
    <description><![CDATA[ 1. ]]></description>
    <pubDate>Fri, 22 Aug 2025 12:53:50 GMT</pubDate>
  </item><item>
    <title>继承</title>
    <link>https://quartz.jzhao.xyz/c++/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/%E7%BB%A7%E6%89%BF</link>
    <guid>https://quartz.jzhao.xyz/c++/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/%E7%BB%A7%E6%89%BF</guid>
    <description><![CDATA[ 1. 继承的基本概念 继承是面向对象编程的核心特性之一，允许我们基于已有类创建新类，实现代码重用和建立类之间的层次关系。 基本语法 class 派生类名 : 继承方式 基类名 { // 派生类成员 }; 2. ]]></description>
    <pubDate>Fri, 22 Aug 2025 12:53:50 GMT</pubDate>
  </item><item>
    <title>虚函数与虚表</title>
    <link>https://quartz.jzhao.xyz/c++/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/%E8%99%9A%E5%87%BD%E6%95%B0%E4%B8%8E%E8%99%9A%E8%A1%A8</link>
    <guid>https://quartz.jzhao.xyz/c++/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/%E8%99%9A%E5%87%BD%E6%95%B0%E4%B8%8E%E8%99%9A%E8%A1%A8</guid>
    <description><![CDATA[ 1. ]]></description>
    <pubDate>Fri, 22 Aug 2025 12:53:50 GMT</pubDate>
  </item>
    </channel>
  </rss>