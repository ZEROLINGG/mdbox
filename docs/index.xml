<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
    <channel>
      <title>Quartz 4</title>
      <link>https://quartz.jzhao.xyz</link>
      <description>Last 10 notes on Quartz 4</description>
      <generator>Quartz -- quartz.jzhao.xyz</generator>
      <item>
    <title>函数指针</title>
    <link>https://quartz.jzhao.xyz/c++/%E5%87%BD%E6%95%B0/%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88</link>
    <guid>https://quartz.jzhao.xyz/c++/%E5%87%BD%E6%95%B0/%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88</guid>
    <description><![CDATA[ C++ 中的函数指针（Function Pointers）是指向函数的指针变量，它存储函数的地址，可以通过函数指针来调用函数。函数指针是 C++ 中实现回调函数、函数表和多态性的重要机制。 函数指针的基本概念 函数指针的声明和定义 #include &lt;iostream&gt; // 普通函数 int add(int a, int b) { return a + b; } int subtract(int a, int b) { return a - b; } int main() { // 函数指针的声明语法：返回类型 (*指针名)(参数列表) int (*funcPtr)(int, i... ]]></description>
    <pubDate>Sat, 09 Aug 2025 08:26:47 GMT</pubDate>
  </item><item>
    <title>内联函数</title>
    <link>https://quartz.jzhao.xyz/c++/%E5%87%BD%E6%95%B0/%E5%86%85%E8%81%94%E5%87%BD%E6%95%B0</link>
    <guid>https://quartz.jzhao.xyz/c++/%E5%87%BD%E6%95%B0/%E5%86%85%E8%81%94%E5%87%BD%E6%95%B0</guid>
    <description><![CDATA[ 1. ]]></description>
    <pubDate>Sat, 09 Aug 2025 08:24:19 GMT</pubDate>
  </item><item>
    <title>默认参数</title>
    <link>https://quartz.jzhao.xyz/c++/%E5%87%BD%E6%95%B0/%E9%BB%98%E8%AE%A4%E5%8F%82%E6%95%B0</link>
    <guid>https://quartz.jzhao.xyz/c++/%E5%87%BD%E6%95%B0/%E9%BB%98%E8%AE%A4%E5%8F%82%E6%95%B0</guid>
    <description><![CDATA[ 1. ]]></description>
    <pubDate>Sat, 09 Aug 2025 08:24:19 GMT</pubDate>
  </item><item>
    <title>函数重载</title>
    <link>https://quartz.jzhao.xyz/c++/%E5%87%BD%E6%95%B0/%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD</link>
    <guid>https://quartz.jzhao.xyz/c++/%E5%87%BD%E6%95%B0/%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD</guid>
    <description><![CDATA[ C++ 中的函数重载（Function Overloading）允许在同一作用域内定义多个同名函数，只要它们的参数列表不同。这是 C++ 多态性的一种体现，使得函数调用更加直观和灵活。 函数重载的基本概念 重载的基本规则 函数重载基于函数签名的不同，函数签名包括： 函数名 参数的数量 参数的类型 参数的顺序 注意：返回类型不是函数签名的一部分！ // 合法的重载：参数数量不同 void print(int x) { std::cout &lt;&lt; &quot;Integer: &quot; &lt;&lt; x &lt;&lt; std::endl; } void print(int x... ]]></description>
    <pubDate>Sat, 09 Aug 2025 06:27:49 GMT</pubDate>
  </item><item>
    <title>参数传递</title>
    <link>https://quartz.jzhao.xyz/c++/%E5%87%BD%E6%95%B0/%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92</link>
    <guid>https://quartz.jzhao.xyz/c++/%E5%87%BD%E6%95%B0/%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92</guid>
    <description><![CDATA[ 值传递（Pass by Value） 基本概念 值传递是将实参的值复制给形参，函数内部操作的是副本，不会影响原始变量。 void modifyValue(int x) { x = 100; // 只修改局部副本 std::cout &lt;&lt; &quot;Inside function: &quot; &lt;&lt; x &lt;&lt; std::endl; // 100 } int main() { int a = 10; modifyValue(a); std::cout &lt;&lt; &quot;After function: &quot; &lt;&lt; a &lt;&... ]]></description>
    <pubDate>Sat, 09 Aug 2025 06:25:50 GMT</pubDate>
  </item><item>
    <title>函数定义与声明</title>
    <link>https://quartz.jzhao.xyz/c++/%E5%87%BD%E6%95%B0/%E5%87%BD%E6%95%B0%E5%AE%9A%E4%B9%89%E4%B8%8E%E5%A3%B0%E6%98%8E</link>
    <guid>https://quartz.jzhao.xyz/c++/%E5%87%BD%E6%95%B0/%E5%87%BD%E6%95%B0%E5%AE%9A%E4%B9%89%E4%B8%8E%E5%A3%B0%E6%98%8E</guid>
    <description><![CDATA[ 核心比喻：书的目录与章节 想象一本书： 声明 (Declaration) 就像是书的目录。它告诉你“有一章叫做‘第五章：太空探索’，它在第 123 页”。它告诉你函数存在，它的名字是什么，它需要什么参数，以及它会返回什么类型的值。但目录本身不包含章节的内容。 定义 (Definition) 就像是书的具体章节内容。它提供了“第五章：太空探索”的全部文字和细节。它提供了函数的具体实现，也就是函数被调用时实际执行的代码。 有了目录（声明），你就可以在书的其他地方引用“第五章”（调用函数），因为你知道它确实存在。但要真正阅读内容，你必须翻到第 123 页去看它的定义。 Part 1: 函数声明 (F... ]]></description>
    <pubDate>Sat, 09 Aug 2025 06:23:10 GMT</pubDate>
  </item><item>
    <title>README</title>
    <link>https://quartz.jzhao.xyz/README</link>
    <guid>https://quartz.jzhao.xyz/README</guid>
    <description><![CDATA[ mdbox - 多领域知识库笔记 介绍 欢迎来到 mdbox 知识库！本仓库用于整理和归档多个技术方向的学习笔记，涵盖编程语言、网络安全、CTF、数据库等主题。所有内容都以 Markdown 形式编写，并适配 Obsidian 使用。 当然也可以在线使用： 在线网址 主要分类 编程语言: Python、Java、C/C++、汇编 网络安全: Web 安全、KALI、CTF 题解 脚本语言: PowerShell、VBScript、JavaScript 数据库: MySQL、SQLite 协作指导 如何参与 Fork 仓库: 点击右上角的 Fork 按钮，创建仓库的副本到你自己的 GitHub ... ]]></description>
    <pubDate>Sat, 09 Aug 2025 06:07:42 GMT</pubDate>
  </item><item>
    <title>index</title>
    <link>https://quartz.jzhao.xyz/</link>
    <guid>https://quartz.jzhao.xyz/</guid>
    <description><![CDATA[ mdbox - 多领域知识库笔记 介绍 欢迎来到 mdbox 知识库！本仓库用于整理和归档多个技术方向的学习笔记，涵盖编程语言、网络安全、CTF、数据库等主题。所有内容都以 Markdown 形式编写，并适配 Obsidian 使用。 当然也可以在线使用： 在线网址 主要分类 编程语言: Python、Java、C/C++、汇编 网络安全: Web 安全、KALI、CTF 题解 脚本语言: PowerShell、VBScript、JavaScript 数据库: MySQL、SQLite 协作指导 如何参与 Fork 仓库: 点击右上角的 Fork 按钮，创建仓库的副本到你自己的 GitHub ... ]]></description>
    <pubDate>Sat, 09 Aug 2025 06:07:42 GMT</pubDate>
  </item><item>
    <title>index</title>
    <link>https://quartz.jzhao.xyz/c++/</link>
    <guid>https://quartz.jzhao.xyz/c++/</guid>
    <description><![CDATA[ C++ 系统学习目录 一、基础入门 1. C++概述与环境搭建 C++的历史与特点 编译器安装（GCC、Clang、MSVC） IDE选择与配置 第一个C++程序 编译与链接过程 2. ]]></description>
    <pubDate>Sat, 09 Aug 2025 05:49:35 GMT</pubDate>
  </item><item>
    <title>引用与指针</title>
    <link>https://quartz.jzhao.xyz/c++/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%BC%95%E7%94%A8%E4%B8%8E%E6%8C%87%E9%92%88</link>
    <guid>https://quartz.jzhao.xyz/c++/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%BC%95%E7%94%A8%E4%B8%8E%E6%8C%87%E9%92%88</guid>
    <description><![CDATA[ C++ 引用与指针详解 在 C++ 中，指针 (Pointer) 和 引用 (Reference) 都提供了间接访问其他变量的能力。然而，它们在底层概念、语法和使用方式上有着本质的区别。理解这些区别对于编写安全、高效的 C++ 代码至关重要。 一个简单的比喻： 指针 就像一张写有朋友家庭住址的便签。你可以通过这张便签找到朋友的家，也可以擦掉这个地址，写上另一个地址，或者这张便签上什么都不写（空指针）。 引用 就像一个人的“绰号”或“别名”。绰号就是这个人本身，它不是一个独立的东西，一旦起了绰号，它就一直代表这个人，不能再用作别人的绰号。 一、 指针 (Pointer) 1. ]]></description>
    <pubDate>Sat, 09 Aug 2025 05:49:35 GMT</pubDate>
  </item>
    </channel>
  </rss>