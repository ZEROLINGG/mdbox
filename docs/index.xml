<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
    <channel>
      <title>Quartz 4</title>
      <link>https://quartz.jzhao.xyz</link>
      <description>Last 10 notes on Quartz 4</description>
      <generator>Quartz -- quartz.jzhao.xyz</generator>
      <item>
    <title>联合体</title>
    <link>https://quartz.jzhao.xyz/c++/%E7%BB%93%E6%9E%84%E4%BD%93%E4%B8%8E%E8%81%94%E5%90%88%E4%BD%93/%E8%81%94%E5%90%88%E4%BD%93</link>
    <guid>https://quartz.jzhao.xyz/c++/%E7%BB%93%E6%9E%84%E4%BD%93%E4%B8%8E%E8%81%94%E5%90%88%E4%BD%93/%E8%81%94%E5%90%88%E4%BD%93</guid>
    <description><![CDATA[ 联合体（Union）是 C++ 中的一种特殊数据类型，它允许在同一内存位置存储不同类型的数据。联合体的所有成员共享同一块内存空间，因此在任何时刻只能存储其中一个成员的值。 联合体的基本概念 联合体的定义和特性 #include &lt;iostream&gt; #include &lt;string&gt; #include &lt;cstring&gt; // 基本联合体定义 union BasicUnion { int intValue; float floatValue; char charValue; }; // 带有不同大小成员的联合体 union DataUnion { char ... ]]></description>
    <pubDate>Sat, 09 Aug 2025 11:59:37 GMT</pubDate>
  </item><item>
    <title>枚举类型</title>
    <link>https://quartz.jzhao.xyz/c++/%E7%BB%93%E6%9E%84%E4%BD%93%E4%B8%8E%E8%81%94%E5%90%88%E4%BD%93/%E6%9E%9A%E4%B8%BE%E7%B1%BB%E5%9E%8B</link>
    <guid>https://quartz.jzhao.xyz/c++/%E7%BB%93%E6%9E%84%E4%BD%93%E4%B8%8E%E8%81%94%E5%90%88%E4%BD%93/%E6%9E%9A%E4%B8%BE%E7%B1%BB%E5%9E%8B</guid>
    <description><![CDATA[ 枚举（Enumeration）是C++中一种用户定义的数据类型，用于定义一组命名的常量。枚举提供了一种将相关常量组织在一起的方式，使代码更加可读和易于维护。 传统枚举（C风格枚举） 基本语法和使用 #include &lt;iostream&gt; #include &lt;string&gt; // 基本枚举定义 enum Color { RED, // 默认值为 0 GREEN, // 默认值为 1 BLUE, // 默认值为 2 YELLOW // 默认值为 3 }; // 指定枚举值 enum Status { PENDING = 1, PROCESSING = 5, COMPLETE... ]]></description>
    <pubDate>Sat, 09 Aug 2025 11:59:37 GMT</pubDate>
  </item><item>
    <title>结构体数组与指针</title>
    <link>https://quartz.jzhao.xyz/c++/%E7%BB%93%E6%9E%84%E4%BD%93%E4%B8%8E%E8%81%94%E5%90%88%E4%BD%93/%E7%BB%93%E6%9E%84%E4%BD%93%E6%95%B0%E7%BB%84%E4%B8%8E%E6%8C%87%E9%92%88</link>
    <guid>https://quartz.jzhao.xyz/c++/%E7%BB%93%E6%9E%84%E4%BD%93%E4%B8%8E%E8%81%94%E5%90%88%E4%BD%93/%E7%BB%93%E6%9E%84%E4%BD%93%E6%95%B0%E7%BB%84%E4%B8%8E%E6%8C%87%E9%92%88</guid>
    <description><![CDATA[ 结构体数组与指针是 C++ 中处理复杂数据结构的重要技术。它们允许我们高效地管理和操作多个结构体对象。 结构体数组基础 静态结构体数组 #include &lt;iostream&gt; #include &lt;string&gt; #include &lt;iomanip&gt; struct Student { int id; std::string name; int age; double gpa; // 构造函数 Student(int i = 0, const std::string&amp; n = &quot;&quot;, int a = 0, double g = 0.0... ]]></description>
    <pubDate>Sat, 09 Aug 2025 11:46:32 GMT</pubDate>
  </item><item>
    <title>结构体定义与使用</title>
    <link>https://quartz.jzhao.xyz/c++/%E7%BB%93%E6%9E%84%E4%BD%93%E4%B8%8E%E8%81%94%E5%90%88%E4%BD%93/%E7%BB%93%E6%9E%84%E4%BD%93%E5%AE%9A%E4%B9%89%E4%B8%8E%E4%BD%BF%E7%94%A8</link>
    <guid>https://quartz.jzhao.xyz/c++/%E7%BB%93%E6%9E%84%E4%BD%93%E4%B8%8E%E8%81%94%E5%90%88%E4%BD%93/%E7%BB%93%E6%9E%84%E4%BD%93%E5%AE%9A%E4%B9%89%E4%B8%8E%E4%BD%BF%E7%94%A8</guid>
    <description><![CDATA[ 结构体（struct）是 C++ 中用于组织相关数据的复合数据类型。它允许将不同类型的变量组合在一起，形成一个新的数据类型。 结构体的基本概念 结构体的定义 #include &lt;iostream&gt; #include &lt;string&gt; // 基本结构体定义 struct Point { int x; int y; }; // 带有不同数据类型的结构体 struct Student { int id; std::string name; double gpa; bool isActive; }; // 嵌套结构体 struct Address { std::string s... ]]></description>
    <pubDate>Sat, 09 Aug 2025 11:29:54 GMT</pubDate>
  </item><item>
    <title>README</title>
    <link>https://quartz.jzhao.xyz/README</link>
    <guid>https://quartz.jzhao.xyz/README</guid>
    <description><![CDATA[ mdbox - 多领域知识库笔记 介绍 欢迎来到 mdbox 知识库！本仓库用于整理和归档多个技术方向的学习笔记，涵盖编程语言、网络安全、CTF、数据库等主题。所有内容都以 Markdown 形式编写，并适配 Obsidian 使用。 当然也可以在线使用： 在线网址 主要分类 编程语言: Python、Java、C/C++、汇编 网络安全: Web 安全、KALI、CTF 题解 脚本语言: PowerShell、VBScript、JavaScript 数据库: MySQL、SQLite 协作指导 如何参与 Fork 仓库: 点击右上角的 Fork 按钮，创建仓库的副本到你自己的 GitHub ... ]]></description>
    <pubDate>Sat, 09 Aug 2025 09:46:24 GMT</pubDate>
  </item><item>
    <title>智能指针基础</title>
    <link>https://quartz.jzhao.xyz/c++/%E6%8C%87%E9%92%88%E4%B8%8E%E5%BC%95%E7%94%A8/%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88%E5%9F%BA%E7%A1%80</link>
    <guid>https://quartz.jzhao.xyz/c++/%E6%8C%87%E9%92%88%E4%B8%8E%E5%BC%95%E7%94%A8/%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88%E5%9F%BA%E7%A1%80</guid>
    <description><![CDATA[ 智能指针是 C++11 引入的重要特性，它们提供了自动内存管理功能，帮助避免内存泄漏、悬空指针等常见问题。智能指针是现代 C++ 编程的核心组成部分。 智能指针概述 为什么需要智能指针 #include &lt;iostream&gt; // 传统指针的问题示例 void traditionalPointerProblems() { std::cout &lt;&lt; &quot;=== 传统指针的问题 ===&quot; &lt;&lt; std::endl; // 1. ]]></description>
    <pubDate>Sat, 09 Aug 2025 09:46:24 GMT</pubDate>
  </item><item>
    <title>index</title>
    <link>https://quartz.jzhao.xyz/</link>
    <guid>https://quartz.jzhao.xyz/</guid>
    <description><![CDATA[ mdbox - 多领域知识库笔记 介绍 欢迎来到 mdbox 知识库！本仓库用于整理和归档多个技术方向的学习笔记，涵盖编程语言、网络安全、CTF、数据库等主题。所有内容都以 Markdown 形式编写，并适配 Obsidian 使用。 当然也可以在线使用： 在线网址 主要分类 编程语言: Python、Java、C/C++、汇编 网络安全: Web 安全、KALI、CTF 题解 脚本语言: PowerShell、VBScript、JavaScript 数据库: MySQL、SQLite 协作指导 如何参与 Fork 仓库: 点击右上角的 Fork 按钮，创建仓库的副本到你自己的 GitHub ... ]]></description>
    <pubDate>Sat, 09 Aug 2025 09:46:24 GMT</pubDate>
  </item><item>
    <title>index</title>
    <link>https://quartz.jzhao.xyz/c++/</link>
    <guid>https://quartz.jzhao.xyz/c++/</guid>
    <description><![CDATA[ C++ 系统学习目录 一、基础入门 1. C++概述与环境搭建 C++的历史与特点 编译器安装（GCC、Clang、MSVC） IDE选择与配置 第一个C++程序 编译与链接过程 2. ]]></description>
    <pubDate>Sat, 09 Aug 2025 09:42:51 GMT</pubDate>
  </item><item>
    <title>动态内存分配</title>
    <link>https://quartz.jzhao.xyz/c++/%E6%8C%87%E9%92%88%E4%B8%8E%E5%BC%95%E7%94%A8/%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D</link>
    <guid>https://quartz.jzhao.xyz/c++/%E6%8C%87%E9%92%88%E4%B8%8E%E5%BC%95%E7%94%A8/%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D</guid>
    <description><![CDATA[ 动态内存分配是 C++ 中的重要概念，它允许程序在运行时根据需要分配和释放内存。这与静态内存分配（编译时确定大小）形成对比。 内存分区概述 程序内存布局 #include &lt;iostream&gt; // 全局变量 - 存储在数据段 int global_var = 100; static int static_global = 200; // 常量 - 存储在只读数据段 const int const_global = 300; void demonstrateMemoryLayout() { // 局部变量 - 存储在栈上 int local_var = 400; static in... ]]></description>
    <pubDate>Sat, 09 Aug 2025 09:42:51 GMT</pubDate>
  </item><item>
    <title>引用的概念与使用</title>
    <link>https://quartz.jzhao.xyz/c++/%E6%8C%87%E9%92%88%E4%B8%8E%E5%BC%95%E7%94%A8/%E5%BC%95%E7%94%A8%E7%9A%84%E6%A6%82%E5%BF%B5%E4%B8%8E%E4%BD%BF%E7%94%A8</link>
    <guid>https://quartz.jzhao.xyz/c++/%E6%8C%87%E9%92%88%E4%B8%8E%E5%BC%95%E7%94%A8/%E5%BC%95%E7%94%A8%E7%9A%84%E6%A6%82%E5%BF%B5%E4%B8%8E%E4%BD%BF%E7%94%A8</guid>
    <description><![CDATA[ 引用（Reference）是 C++ 中的一个重要特性，它为已存在的变量提供了一个别名。引用在很多方面比指针更安全、更易用，是现代 C++ 编程的重要组成部分。 引用的基本概念 什么是引用 引用可以看作是一个已存在变量的别名。对引用的任何操作，实际上都是对它所引用的原始变量的操作。 #include &lt;iostream&gt; int main() { // 普通变量 int x = 42; // 引用声明：必须在声明时初始化 int&amp; ref = x; // ref 是 x 的引用（别名） std::cout &lt;&lt; &quot;引用的基本概念:&quot; &lt;... ]]></description>
    <pubDate>Sat, 09 Aug 2025 09:42:51 GMT</pubDate>
  </item>
    </channel>
  </rss>